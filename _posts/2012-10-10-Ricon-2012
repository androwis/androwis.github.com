---
layout: post
title: Lessons from Ricon 2012
tweet: What @androwis learned from Ricon 2012
---

Look at Storm and Solr
Storm Vid. [http://vimeo.com/40972420]

Solr and Riak
 Riak Search
 --pretends to be lucene/solr
 --lack of analyzer/language/feature support
 --bad performance/resource usage for certain queries
 Basho isn't in the business of search

 Solr is great
 --great analyzer/language support
 --features: ranking, faceting, highlighting, geo
 --rests upon Lucene
 --active development

Why is riak using that?
--Riak is great at storing data
--Map/Reduce

Riak Strengths
--Riak HA, distributed scale out/in
--Solr - efficient index, features people want
** make riak searchable with Solr and Solr HA, distributed w/ riak

SOLR has distributed search
--Write it like Riak | Query it like Solr

Extract fields based on content type
-- One Solr instance per node



Migrating from MySQL to Riak
----------------------------
enStratus is a cloud infrastructure management


Rebuilding a bird in flight
-----------------------------
one year ago :: 15billion API requests per day!! 107k reqs/second
two transitions  ruby --> scala

going from 
|       .
|      / \
|	  .   .
|     | | |

Replacing monorail to every feauture of twitter is its own individually scaled service

Service Oriented Architecture gives you
--> Ownership
--> Debugging
--> Performance

Hard to change if they touch more than one service
--> difficult to add new features
:: --- :: Interactions --> More coordination overhead for a given feature addition
--> lots more interfaces
--> testing is difficult

Tools that make this possible
--> Zipkin - Distributed tracing.  
--> Finagle 
--> IAGO - Load Generator
--> Ostrich - Stats Collector

Thrift to communicate exclusively


Data Structures in Riak
Russell Brown, Sean Cribbs
Eventual Consistency - you can coordinate looseley
-the state in your system needs convergence to keep moving forward
-Fault tolerant, HA, Low Latency

Let's look at Race Conditions
* A vs. B writting to same nodes / same data
Riak keeps both
Divergent copies of data gives you versions called "siblings"

Making the decision for truth is called Semantic Resolution
problems arise only with Deletions

Bounded Join Semi-Lattice
<S, u, _|_>
u is least upper bound function
_|_ this is the lowest bound

S=all finite sets
U = set-union
_|_ = {}

Vector Clock is a lattice...

INRIA
CRDT 
-convergent (state based)
-Commutative (operation based)

Boundary Talk (featherstone)
--Heizenburg pricnciple, can't measure anythnig without changing state ::
Non-invasive monitoring
Radiology is the golden goal
what are the features we want to measure

Bringing consistency to Ria
CAP Consistency, Availability, Partition-Tolerance
Critical Data... don't give a shit about big data


Immutability Changes Everything....
Pat Helland - Bad Ass

Introduction
------------
Old (Semaphore's great)  || New (Semaphore's are hard)
Cost of storage is driven down
Can keep lots of data for a long time

Bandwidth Costs are going down (locality is not that important)
Semaphore and latches are hurting more than anything
Increasing Ambiguity (can you wait for enough knowledge)


Accountanst don't use erasers
------------
"Append Only" Computing
Observations Recorded --> Calculate cells (derive answers)
Can't rewrite history

Recorded & Derived Knowledge:
Accountants can't delete information (include errata)

Distributed computing back in the day
:everything is immutable, w/ multiple copies

Idempotance is not that hard
No need to normalize data if you're not updating

Eric Brewer | Ricon 2012
Advancing Distributed Systems
-----------------------------
Charles Bachman (Turing Award)
Navigational Databases
-CODASYL
Wikipedia IDMS
Hard to program/maintain

---> This lead to relation
SQL is the (only) API :: Model doesn't change... API outlives data
UNIX.  NoSQL is following the UNIX tradition

Relational View (Top Down)
-clean model

Systems View (Bottom Up)
-build on top


NoSQL in Context
* Large reusable storage component
Systems Valuse
 -Layered, ideally modular APIs
 -Enable a range of systems and semantics

 Object-Relational Mapping Problem
Integrating data into APIs is the best way place for NoSQL
Want data collocated for =1 seek
do SSDs => normalizations OK?

Usually, in NoSQL, you get one value